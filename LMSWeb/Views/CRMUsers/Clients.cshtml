@model LMSWeb.ViewModel.CRMClientViewModel
@{
    ViewBag.Title = "Clients";
    Layout = "~/Views/Shared/_LayoutCRM.cshtml";
}
<style>
    .card.draggable {
        margin-bottom: 1rem;
        cursor: grab;
    }

    .droppable {
        background-color: var(--success);
        min-height: 120px;
        margin-bottom: 1rem;
    }

    body {
        overflow-x:hidden;
    }
</style>

<div class="row">
    <button class="btn btn-primary js-btn-prev" type="button" title="Prev"><a href="@Url.Action("AddClient", "CRMUsers")">Add Client</a></button>

</div>
<div class="row" >
    <div class="row flex-row flex-sm-nowrap py-3" style="overflow-x:auto;height: 86vh; width: 100%; ">
        @if (Model != null)
        {
            if (Model.lstClientSubStages != null)
            {
                if (Model.lstClientSubStages.Count > 0)
                {
                    foreach (var itemStage in Model.lstClientSubStages)
                    {
                        int counter = 0;
                        var stageId = "S" + itemStage.SubStageId;
                        <div class="col-sm-6 col-md-4 col-xl-3" id="@stageId">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-uppercase text-truncate py-2">@itemStage.SubStageName</h6>
                                    <div class="items border border-light">
                                        @if (Model.objCRMUserLST != null)
                                        {
                                            if (Model.objCRMUserLST.Count > 0)
                                            {
                                                foreach (var itemUser in Model.objCRMUserLST)
                                                {
                                                    if (itemUser.CurrentSubStage == itemStage.SubStageId)
                                                    {
                                                        counter++;
                                                        var cardUserId = "cd" + itemUser.Id;
                                                        <div class="card draggable shadow-sm" id="@cardUserId" draggable="true" ondragstart="drag(event)">
                                                            <div class="card-body p-2">
                                                                <div class="card-title">
                                                                    @*<img src="//placehold.it/30" class="rounded-circle float-right">*@
                                                                    <a href="@Url.Action("AddClient", "CRMUsers", new { id = itemUser.Id })" class="lead font-weight-light">@itemUser.FirstName @itemUser.LastName</a>
                                                                </div>
                                                                <p>
                                                                    @itemUser.Email
                                                                </p>
                                                                @*<button class="btn btn-primary btn-sm">View</button>*@
                                                            </div>
                                                        </div>
                                                        <div class="dropzone rounded" id="m5" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                                                    }
                                                }
                                            }
                                        }
                                        @if (counter == 0)
                                        {
                                            <div class="dropzone rounded" id="m5" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <script>
                        $(document).ready(function () {
                            $("#sidebar").addClass('active');
                        });
                        const drag = (event) => {
                            event.dataTransfer.setData("text/plain", event.target.id);
                        }

                        const allowDrop = (ev) => {
                            ev.preventDefault();
                            if (hasClass(ev.target, "dropzone")) {
                                addClass(ev.target, "droppable");
                            }
                        }

                        const clearDrop = (ev) => {
                            removeClass(ev.target, "droppable");
                        }

                        const drop = (event) => {
                            event.preventDefault();
                            const data = event.dataTransfer.getData("text/plain");
                            const element = document.querySelector(`#${data}`);
                            try {
                                // remove the spacer content from dropzone
                                event.target.removeChild(event.target.firstChild);
                                // add the draggable content
                                event.target.appendChild(element);
                                // remove the dropzone parent
                                unwrap(event.target);

                                updateCRMUserStage(element.id, event.path[4].id)
                            } catch (error) {
                                console.warn("can't move the item to the same place")
                            }
                            updateDropzones();
                        }

                        const updateDropzones = () => {
                            /* after dropping, refresh the drop target areas
                              so there is a dropzone after each item
                              using jQuery here for simplicity */

                            var dz = $('<div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>');

                            // delete old dropzones
                            $('.dropzone').remove();

                            // insert new dropdzone after each item
                            dz.insertAfter('.card.draggable');

                            // insert new dropzone in any empty swimlanes
                            $(".items:not(:has(.card.draggable))").append(dz);

                        };

                        // helpers
                        function hasClass(target, className) {
                            return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
                        }

                        function addClass(ele, cls) {
                            if (!hasClass(ele, cls)) ele.className += " " + cls;
                        }

                        function removeClass(ele, cls) {
                            if (hasClass(ele, cls)) {
                                var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
                                ele.className = ele.className.replace(reg, ' ');
                            }
                        }

                        function unwrap(node) {
                            node.replaceWith(...node.childNodes);
                        }

                        function updateCRMUserStage(userId, stageId) {
                            var uId = userId.substr(2, userId.length - 1);
                            var sId = stageId.substr(1, stageId.length - 1);
                            $.ajax({
                                type: "POST",
                                url: "/CRMUsers/MoveUserToSubStage",
                                data: '{uId: "' + uId + '",sId: "' + sId + '"}',
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (response) {
                                    toastr.success("Client moved Successfully");
                                },
                                failure: function (response) {
                                },
                                error: function (response) {
                                    toastr.success("Client moved Successfully");
                                    //$('#dvActivityData').html(response.responseText);
                                }
                            });

                        }
                    </script>
                }
            }
        }
    </div>
</div>